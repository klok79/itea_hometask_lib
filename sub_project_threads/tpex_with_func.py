import time
from concurrent.futures import ThreadPoolExecutor


def func_run(num: int, count:int):
    """
    В таком виде это работает, если в submit ThreadPoolExecutor параметры добавлять
    или через запятую позиционно: ex.submit(func_run, 1, 7)
    или именовано: ex.submit(func_run, num=1, count=7)
    Если же submit параметры передавать как кортеж, как показывал сенсей - то и ловить
    его в функции нужно одной перемнной с последующей разверткой кортежа
    Никакие знаки умножить нахрен не нужны.
    Сенсей почему-то учил, что параметры к функции в submit должны передаватьсяв виде кортежа
    Он передавал один параметр (в кортеже) в * перед использованием параметра он поставил чтобы
    неявно развернуть кортеж и использовать само значение. Это видимо фича сенсеев. При
    нескольких параметрах разверачивать кортеж нужно будет явно.
    Но так как параметры к функции в submit можно передавать любым способом - нахера
    выйобываться? Не понимаю. Но час я убил.
    """
    for i in range(count):
        print(f'func_run {num} run {i + 1} pass from {count}')
        time.sleep(1)
    print(f'func_run {num} finished')


with ThreadPoolExecutor(max_workers=5) as ex:
    """
    Эта конструкция обеспечивает создание потока из функции с параметрами, запуск потока,
    хранение перечня потоков и ожидание завершения всех потоков.
    """
    ex.submit(func_run, num=1, count=7)
    ex.submit(func_run, 2, 8)
    ex.submit(func_run, 3, 3)

